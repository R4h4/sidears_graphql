app: sidears
service: sidears-appsync
org: karstene

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-southeast-1
  tags:
    project: sidears
    service: ${self:service}

plugins:
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-appsync-offline
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        source:
          - table: IdeaCollections
            source: [seed-data/IdeaCollections.json]
          - table: Idears
            source: [seed-data/Idears.json]

  appSync:
    name: dynamodbGraphQL
    authentication: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ap-southeast-1
      defaultAction: ALLOW
      userPoolId: ap-southeast-1_8DPdGUugz # sidears-dev
    mappingTemplates:
      - dataSource: IdeaCollections
        type: Query
        field: getUserCollections
      - dataSource: UserInfo
        type: Query
        field: getUserInfo
    dataSources:
      - type: AMAZON_DYNAMODB
        name: IdeaCollections
        description: 'Table for Users Idea Collection'
        config:
          tableName: 'IdeaCollections'
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/IdeaCollections"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/IdeaCollections/*"
      - type: AMAZON_DYNAMODB
        name: UserInfo
        description: 'Table for Users Information'
        config:
          tableName: 'UserInfo'
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/UserInfo"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/UserInfo/*"
      - type: RELATIONAL_DATABASE
        name: Idears
        config:
          dbClusterIdentifier: { Ref: RDSCluster }
          awsSecretStoreArn: { Ref: RDSClusterSecret }
          databaseName: sidears
          schema: mysql
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "rds-data:DeleteItems"
                - "rds-data:ExecuteSql"
                - "rds-data:GetItems"
                - "rds-data:InsertItems"
                - "rds-data:UpdateItems"
              Resource:
                - "arn:aws:rds:{REGION}:{ACCOUNT_ID}:cluster:database-sidears-1"
                - "arn:aws:rds:{REGION}:{ACCOUNT_ID}:cluster:database-sidears-1:*"
            - Effect: "Allow"
              Action:
                - "secretsmanager:GetSecretValue"
              Resource:
                - "arn:aws:secretsmanager:{REGION}:{ACCOUNT_ID}:secret:dev/RDS/sidears"
                - "arn:aws:secretsmanager:{REGION}:{ACCOUNT_ID}:secret:dev/RDS/sidears:*"

